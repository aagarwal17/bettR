dfModel48a <- glm(heart.disease ~ snoring, data=dfTable31a, family="binomial")
dfModel48b <- glm(heart.disease ~ snoring, data=dfTable31b, family="binomial")
dfModel48c <- glm(heart.disease ~ snoring, data=dfTable31c, family="binomial")
summary(dfModel48a)
summary(dfModel48b)
summary(dfModel48c)
dfTable410 <- data.frame(ft=1:23,
temperature=c(66,70,69,68,67,72,73,70,57,63,70,78,67,53,67,75,70,81,76,79,75,76,58),
td=c(0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1))
model410 <- glm(td ~ temperature, data=dfTable410, family = "binomial")
summary(model410)
predict(model410, newdata = data.frame(temperature=31))
exp(predict(model410, newdata = data.frame(temperature=31)))/(1+exp(predict(model410, newdata = data.frame(temperature=31))))
lrtest(model410, glm(td ~ 1, data=dfTable410, family="binomial"))
dfTable32 <- data.frame(satellites=c(
8, 4, 0, 0, 1, 3, 0, 0, 8, 6, 5, 4, 3, 4, 3, 5, 8, 3, 6, 4, 0, 3, 0, 0, 1, 1, 1, 4, 2, 0, 2, 0, 6, 10, 5, 3, 8, 9, 0, 2, 3, 0, 4, 0,
0, 0, 0, 14, 0 , 1, 3, 4, 5, 0, 6, 6, 5, 5, 0, 3, 10, 7, 0, 0, 0, 0, 5, 0, 1, 1, 1, 3, 2, 5, 0, 3, 6, 7, 6, 3, 4, 4, 0, 0, 8, 0, 0,
9, 0, 0, 8, 5, 2, 5, 0, 0, 6, 5, 4, 5, 15, 0, 5, 0, 1, 0, 5, 4, 0, 0, 1, 1, 4, 1, 6, 0, 6, 2, 4, 0, 0, 6, 0, 4, 0, 4, 4, 0, 2, 0,
0, 0, 11, 1, 4, 3, 0, 0, 0, 3, 9, 3, 6, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 1, 1, 2, 0, 12, 6, 3, 2, 4, 5, 7, 0, 10, 0, 0, 4, 7, 3, 0
), weight=c(
3.05, 2.6, 2.15, 1.85, 3, 2.3, 1.3, 2.1, 2, 3.15, 2.8, 2.8, 3.6, 1.6, 2.3, 2.05, 3.05, 2.4, 2.25, 2.25, 2.9, 2.25, 1.7, 3.2,
1.97, 1.6, 2.9, 2.3, 2.1, 1.4, 3.28, 2.3, 2.3, 2.25, 2.4, 3.32, 2.1, 3, 1.6, 1.85, 2.28, 2.2, 3.28, 2.35,
1.55, 2.1, 2.15, 2.3, 2.2, 1.6, 3.15, 3.2, 2.7, 1.9, 2.5, 2.6, 2.1, 2, 2.75, 2.45, 3.2, 2.8, 1.9, 1.2, 1.65, 3.05, 3.85, 1.55,
2.2, 2.55, 2.4, 3.25, 3.33, 2.4, 2.22, 3.2, 1.95, 3.05, 2.25, 2.92, 3.73, 2.85, 1.9, 1.8, 3.05, 1.8, 2.62,
2.3, 1.9, 2.65, 2.95, 2.7, 2.6, 2.7, 2.6, 1.85, 2.8, 3.3, 2.10, 2.9, 3, 2.25, 2.15, 2.4, 1.65, 1.6, 2.1, 2.55, 2.75, 2.55, 2.8,
3, 2.55, 3.1, 2.5, 1.8, 2.5, 1.65, 1.47, 1.8, 2.2, 2.63, 2, 3.02, 2.3, 1.95, 3.5, 2.15, 2.17, 2.63,
2.1, 1.95, 3.05, 2, 1.95, 2, 2.6, 2, 2.65, 3.1, 3.25, 3, 2.7, 2.7, 2.55, 2.8, 1.3, 1.8, 2.2, 2.25, 2.3, 1.9, 2.45, 2.25,
2.87, 2, 1.9, 2.1, 3.23, 1.8, 2.9, 2.02, 2.9, 3.1, 5.2, 2.4, 1.9, 2, 3.2, 2.35, 2.75, 2.75, 2
))
dfTable32[dfTable32$satellites > 0,]$satellites <- 1
model48 <- glm(satellites ~ weight, data=dfTable32, family="binomial")
summary(model48)
v120 <- predict(model48, data.frame(weight=1.20))
v244 <- predict(model48, data.frame(weight=2.44))
v520 <- predict(model48, data.frame(weight=5.20))
exp(v120)/(1+exp(v120))
exp(v244)/(1+exp(v244))
exp(v520)/(1+exp(v520))
confint(model48)
exp(1.113390)/(1+exp(1.113390))
exp(2.596484)/(1+exp(2.596484))
exp(1.113390)
exp(2.596484)
summary(model48)
library(fma)
load("beer.rda")
print(beer)
# a
plot(beer)
t <- time(beer)
model1Linear <- lm(beer ~ t)
summary(model1Linear)
# c
t2 <- time(beer)**2
model1Quadratic <- lm(beer ~ t2)
summary(model1Quadratic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
# d
library(TSA)
# c
t2 <- time(beer)**2
model1Quadratic <- lm(beer ~ t2)
summary(model1Quadratic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
lines(model1Linear, col="red")
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
# d
library(TSA)
model1Quadratic <- lm(beer ~ t2)
summary(model1Quadratic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
# d
library(TSA)
model1Quadratic <- lm(beer ~ t2 + time(beer))
summary(model1Quadratic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
# c
t2 <- time(beer)**2
model1Quadratic <- lm(beer ~ t2 + time(beer))
summary(model1Quadratic)
# c
t2 <- time(beer)**2
model1Quadratic <- lm(beer ~ t2 + time(beer))
summary(model1Quadratic)
# d
library(TSA)
model1Harmonic <- lm(beer ~ harmonic(beer) + time(beer))
summary(model1Harmonic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
# e
plot(model1Linear$residuals)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
model1Harmonic <- lm(beer ~ harmonic(beer) + time(beer))
summary(model1Harmonic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
# e
plot(model1Linear$residuals)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
summary(model1Harmonic)
# e
plot(model1Linear$residuals)
# f
runs(model1Linear$residuals)
library(fma)
load("beer.rda")
print(beer)
# a
plot(beer)
t <- time(beer)
model1Linear <- lm(beer ~ t)
summary(model1Linear)
plot(beer)
abline(model1Linear, col="red")
# c
t2 <- time(beer)**2
model1Quadratic <- lm(beer ~ t2 + time(beer))
summary(model1Quadratic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Quadratic), col="red")
# d
library(TSA)
model1Harmonic <- lm(beer ~ harmonic(beer) + time(beer))
summary(model1Harmonic)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
# e
plot(model1Linear$residuals)
# g
acf(rstandard(model1Linear))
# h
shapiro.test(rstandard(model1Linear))
ks.test(time(beer), rstandard(model1Linear))
qqnorm(rstandard(model1Linear))
abline(0,1)
# i
plot(model1Quadratic$residuals)
runs(model1Quadratic$residuals)
shapiro.test(rstandard(model1Quadratic))
ks.test(time(beer), rstandard(model1Quadratic))
acf(rstandard(model1Quadratic))
runs(model1Quadratic$residuals)
acf(rstandard(model1Quadratic))
ks.test(time(beer), rstandard(model1Quadratic))
qqnorm(rstandard(model1Quadratic))
qqnorm(rstandard(model1Quadratic))
abline(0,1)
# i
plot(model1Quadratic$residuals)
# j
plot(model1Harmonic$residuals)
runs(model1Harmonic$residuals)
acf(rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
qqnorm(rstandard(model1Harmonic))
abline(0,1)
# j
plot(model1Harmonic$residuals)
runs(model1Harmonic$residuals)
?runs
runs(model1Quadratic$residuals)
runs(model1Harmonic$residuals)
acf(rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
qqnorm(rstandard(model1Harmonic))
abline(0,1)
plot(model1Harmon
# j
plot(model1Harmonic$residuals)
runs(model1Harmonic$residuals)
acf(rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
qqnorm(rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
qqnorm(rstandard(model1Harmonic))
abline(0,1)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
# j
plot(model1Harmonic$residuals)
runs(model1Harmonic$residuals)
acf(rstandard(model1Harmonic))
shapiro.test(rstandard(model1Harmonic))
ks.test(time(beer), rstandard(model1Harmonic))
qqnorm(rstandard(model1Harmonic))
abline(0,1)
# i
plot(model1Quadratic$residuals)
plot(beer)
lines(as.vector(time(beer)), fitted(model1Harmonic), col="red")
# 2
sim2 <- arima.sim(model=list(ar=c(-0.9)), n=250)
# a
# The ACF of AR(1) is phi to the power of the lag
plot(1:20, (-0.9)**(1:20), type="l")
# a
# The ACF of AR(1) is phi to the power of the lag
plot(1:20, (-0.9)**(1:20))
# b
acf(sim2, lag.max=50)
# b
acf(sim2, lag.max=20)
# a
# The ACF of AR(1) is phi to the power of the lag
plot(1:20, (-0.9)**(1:20), type="l")
# b
acf(sim2, lag.max=20)
# b
acf(sim2, lag.max=20)
# c
# In theory the partial ACF is -0.9 for the first lag and 0 after
plot(c(1:5), c(-0.9, 0, 0, 0, 0), type="l")
# c
# In theory the partial ACF is -0.9 for the first lag and 0 after
plot(c(1:5), c(-0.9, 0, 0, 0, 0))
# d
pacf(sim2, 5)
# b
acf(sim2, lag.max=20)
# c
# In theory the partial ACF is -0.9 for the first lag and 0 after
plot(c(1:5), c(-0.9, 0, 0, 0, 0))
# d
pacf(sim2, 5)[1]
# d
pacf(sim2, 5)[2:5]
library(TSA)
data(gold)
print(gold)
# a
plot(gold)
# b
goldLogDiff <- log(gold) - log(lag(gold, 1))
plot(goldLogDiff)
# c
acf(goldLogDiff)
# c
acf(goldLogDiff, 50)
# 4
library(TSA)
data(robot)
print(robot)
# a
plot(robot)
# b
acf(robot, 100)
pacf(robot, 100)
?robot
# b
acf(robot, 100)
pacf(robot, 100)
# b
acf(robot, 100)
# b
acf(robot, 20)
# b
acf(robot, 100)
pacf(robot, 100)
# c
eacf(robot)
auto.arima(robot)
plot(armasubsets(robot, nar=10, nma=10))
plot(armasubsets(robot, nar=50, nma=50))
plot(armasubsets(robot, nar=20, nma=20))
plot(armasubsets(robot, nar=10, nma=10))
plot(armasubsets(robot))
plot(armasubsets(robot, nar=25, nma=25))
plot(armasubsets(robot, nar=20, nma=20))
plot(armasubsets(robot, nar=10, nma=10))
?armasubsets
?auto.arima
auto.arima(robot, max.q=10, max.d=10)
plot(armasubsets(robot, nar=5, nma=5))
auto.arima(robot)
# 5
sim5 <- arima.sim(list(order=c(0,1,1), ma=-0.6), n=200)
# a
library(tseries)
adf.test(sim5, k=0)
# b
adf.test(sim5)
# c
sim5Diff <- sim5 - lag(sim5, 1)
adf.test(sim5Diff, k=0)
adf.test(sim5Diff)
plot(sim5)
plot(sim5)
plot(rstandard(model1Harmonic))
# e
plot(rstandard(model1Linear$residuals))
# f
runs(rstandard(model1Linear$residuals))
# e
plot(rstandard(model1Linear))
# f
runs(rstandard(model1Linear))
# e
plot(rstandard(model1Linear))
# f
runs(rstandard(model1Linear))
# f
runs(rstandard(model1Linear))
# g
acf(rstandard(model1Linear))
# h
shapiro.test(rstandard(model1Linear))
ks.test(time(beer), rstandard(model1Linear))
qqnorm(rstandard(model1Linear))
abline(0,1)
# i
plot(rstandard(model1Quadratic))
# j
plot(rstandard(model1Harmonic))
shiny::runApp('Developer/bettR')
shiny::runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
plot(c(1:365), rnorm(365, 0.7, 0.05))
cumsum(sample(c(-1, 1), 365, replace=TRUE))
plot(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)))
plot(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)), type="l")
plot(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)), type="l")
abline(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)))
abline(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)))
plot(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)), type="l")
lines(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)))
lines(c(1:365), cumsum(sample(c(-1, 1), 365, replace=TRUE)))
plot(c(1:365), s1, type="l", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))))
s1 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
s1 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
s3 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
plot(c(1:365), s1, type="l", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))))
s1 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
s2 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
s3 <- cumsum(sample(c(-1, 1), 365, replace=TRUE))
plot(c(1:365), s1, type="l", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))))
lines(c(1:365), s2)
lines(c(1:365), s3)
runApp('Developer/bettR')
plot(0, type="l", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))))
lines(c(1:365), s1, col="red")
lines(c(1:365), s2, col="blue")
lines(c(1:365), s3, col="green")
plot(0, type="b", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))))
lines(c(1:365), s1, col="red")
lines(c(1:365), s2, col="blue")
lines(c(1:365), s3, col="green")
plot(0, type="b", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))), xlim=c(1, 365))
lines(c(1:365), s1, col="red")
lines(c(1:365), s2, col="blue")
lines(c(1:365), s3, col="green")
plot(c(), type="b", ylim=c(min(min(s1), min(s2), min(s3)),max(max(s1), max(s2), max(s3))), xlim=c(1, 365))
lines(c(1:365), s1, col="red")
lines(c(1:365), s2, col="blue")
lines(c(1:365), s3, col="green")
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
exampleModels <- data.frame(
Source=c("Bettr Composite", "ESPN", "FiveThirtyEight"),
Start.Date=c("11-04-2022", "09-01-2015", "09-01-2015"),
Accuracy90=c(0.82, 0.71, 0.78),
Accuracy1yr=c(0.82, 0.71, 0.84),
AccuracyOverall=c(0.81, 0.77, 0.80)
)
exampleModels.dfs()
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
?titlePanel
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
gameModels <- data.frame(
Source=c("Bettr Composite", "ESPN", "FiveThirtyEight"),
Home.Win.Per=c("78%", "85%", "82%", "74%"),
Home.Win.Per=c(""),
Accuracy1yr=c(0.82, 0.71, 0.84),
AccuracyOverall=c(0.81, 0.77, 0.80)
)
runApp('Developer/bettR')
runApp('Developer/bettR')
gameModels <- data.frame(
Source=c("Bettr Composite", "ESPN", "FiveThirtyEight"),
Home.Win.Per=c("78%", "85%", "74%"),
Away.Win.Per=c("22%", "15%", "26%"),
Accuracy90=c(0.82, 0.71, 0.78),
Accuracy1yr=c(0.82, 0.71, 0.84),
AccuracyOverall=c(0.81, 0.77, 0.80)
)
gameModels
names(gameModels) <- c("Source", "Home Win %", "Away Win %", "90 Day Accuracy", "1 Year Accuracy", "Overall Accuracy")
gameModels
renderTable({ gameModels })
runApp('Developer/bettR')
runApp('Developer/bettR')
?a
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
runApp('Developer/bettR')
?shinyApp
?shinyApp
??shinyApp
# Load R packages
library(shiny)
library(shinythemes)
library(tidyverse)
library(shinydashboard)
library(rvest)
?shinyApp
source('Developer/bettR/tabTesting.R')
source('Developer/bettR/tabTesting.R')
getwd()
source('Developer/bettR/tabTesting.R')
source('Developer/bettR/tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
# Run the application
# Here we run the Shiny Application
# Create Shiny object
#
ui <- htmlTemplate()
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
runApp('tabTesting.R')
libary(hoopR)
install.packages("hoopr")
libary(hoopR)
install.packages("hoopR")
install.packages("hoopR")
install.packages("hoopR")
libary(hoopR)
library(hoopR)
espn_nba_scoreboard("20221119")
library(hoopR)
